import{_ as i,c as a,o as n,ag as e}from"./chunks/framework.BDwTZuFy.js";const c=JSON.parse('{"title":"Dependency injection","description":"","frontmatter":{},"headers":[],"relativePath":"Architecture/di.md","filePath":"Architecture/di.md","lastUpdated":1747782219000}'),l={name:"Architecture/di.md"};function h(t,s,p,k,d,r){return n(),a("div",null,s[0]||(s[0]=[e(`<h1 id="dependency-injection" tabindex="-1">Dependency injection <a class="header-anchor" href="#dependency-injection" aria-label="Permalink to &quot;Dependency injection&quot;">​</a></h1><p>번역하면 <code>의존성 주입</code>이라는 뜻이다.</p><h2 id="의존성" tabindex="-1">의존성 <a class="header-anchor" href="#의존성" aria-label="Permalink to &quot;의존성&quot;">​</a></h2><p>사전적 정의로는 <code>다른 것에 의지하여 생활하거나 존재하는 성질.</code></p><p>예를 들면 철수가 영희에게 너 뭐먹을래? 라고 물었는데<br> 영희는 <code>나는 너 먹는거</code> 라고 대답한 상황에서 영희는 철수에게 의존성이 있는 것이다.</p><h2 id="의존성-주입" tabindex="-1">의존성 주입 <a class="header-anchor" href="#의존성-주입" aria-label="Permalink to &quot;의존성 주입&quot;">​</a></h2><p>그러면 왜 주입이라는 단어를 사용할까?</p><p><strong>의존성 주입이 안된 예시</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Younghee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chulsoo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Chulsoo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NewYounghee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Younghee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Younghee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        chulsoo: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Chulsoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{}, </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 직접 만든다! (강한 결합)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>영희</code>를 생성하는 내부에서 <code>철수</code>를 직접 생성하면서 강한 철수와 영희는 강한 결합을 지니고 있습니다</li></ul><p><strong>의존성 주입 예시</strong></p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Younghee</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    chulsoo </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Chulsoo</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 외부에서 철수를 주입 받는다.</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">func</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> NewYounghee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">c</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Chulsoo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Younghee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Younghee</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        chulsoo: c,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><ul><li><code>영희</code>는 <code>철수</code>를 내부에서 생성하지 않고 파라미터로 받으면서 외부에서 <code>주입</code> 받는 형태가 되었습니다.</li></ul><h2 id="의존성-주입-왜-사용할까" tabindex="-1">의존성 주입, 왜 사용할까? <a class="header-anchor" href="#의존성-주입-왜-사용할까" aria-label="Permalink to &quot;의존성 주입, 왜 사용할까?&quot;">​</a></h2><blockquote><p>그럼 왜 내부에서 의존성을 직접 생성하지 않고 외부에서 주입 받을까?</p></blockquote><h3 id="유연성-증가" tabindex="-1">유연성 증가 <a class="header-anchor" href="#유연성-증가" aria-label="Permalink to &quot;유연성 증가&quot;">​</a></h3><ul><li>의존하는 객체를 내부에서 만들면 의존관계가 강하게 결합됩니다.</li><li>주입받으면 필요한 객체를 바꿀 수 있어서 기능 변경이나 확장이 쉽습니다.</li><li>예를 들어 영희가 철수가 아닌 미진이로 쉽게 바꿀 수 있는 것.</li></ul><h3 id="테스트-용이성" tabindex="-1">테스트 용이성 <a class="header-anchor" href="#테스트-용이성" aria-label="Permalink to &quot;테스트 용이성&quot;">​</a></h3><ul><li>내부에서 의존객체를 생성할 경우 <code>테스트</code>가 어렵습니다</li><li>의존성을 주입 받으면 <code>Mock</code>객체를 생성하여 테스트가 쉬워집니다. <ul><li>A를 테스트하고 싶은데 A가 B를 필요할 경우 B는 테스트용 더미 객체를 사용할 수 있다.</li></ul></li></ul><h3 id="결합도-감소" tabindex="-1">결합도 감소 <a class="header-anchor" href="#결합도-감소" aria-label="Permalink to &quot;결합도 감소&quot;">​</a></h3><ul><li>의존성을 직접 만들면 객체가 강하게 결합되어 변경 시 큰 영향을 줄 수 있다</li><li>의존성 주입은 결합도를 낮춰(Loose coupling) 더 모듈화 할 수 있다</li></ul>`,21)]))}const E=i(l,[["render",h]]);export{c as __pageData,E as default};
