import{_ as e,c as a,o as s,ag as i}from"./chunks/framework.B0zzL8Pn.js";const u=JSON.parse('{"title":"shell","description":"","frontmatter":{},"headers":[],"relativePath":"Linux/shell.md","filePath":"Linux/shell.md","lastUpdated":1748613260000}'),o={name:"Linux/shell.md"};function n(t,l,h,c,r,d){return s(),a("div",null,l[0]||(l[0]=[i(`<h1 id="shell" tabindex="-1">shell <a class="header-anchor" href="#shell" aria-label="Permalink to &quot;shell&quot;">​</a></h1><blockquote><p><code>Shell</code>은 커널과 사용자를 연결해주는 인터페이스다<br> 사용자가 입력한 명령을 해석하고 이를 커널에 전달한 후, 커널로부터 받은 출력을 사용자에게 반환합니다.</p></blockquote><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 내가 사용하는 쉘 확인하기</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">echo</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $SHELL</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 설치뒌 쉘 목록</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cat</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /etc/shells</span></span></code></pre></div><h2 id="login-shell-non-login-shell" tabindex="-1">login shell, non-login shell <a class="header-anchor" href="#login-shell-non-login-shell" aria-label="Permalink to &quot;login shell, non-login shell&quot;">​</a></h2><p>쉘은 사용자가 어떻게 진입했는지에 따라 로그인쉘과 비로그인쉘 환경으로 나눠진다.</p><h3 id="login-shell" tabindex="-1">Login Shell <a class="header-anchor" href="#login-shell" aria-label="Permalink to &quot;Login Shell&quot;">​</a></h3><ul><li>SSH로 접속한 경우</li><li><code>su - user</code> (대시 <code>-</code>붙은 경우)</li></ul><p>사용자가 시스템에 <code>로그인</code>할 때 최초로 실행되는 쉘.<br> 시스템은 이 쉘에게 사용자 환경을 초기화하는 작업을 맡긴다</p><h4 id="환경설정" tabindex="-1">환경설정 <a class="header-anchor" href="#환경설정" aria-label="Permalink to &quot;환경설정&quot;">​</a></h4><p>로그인쉘의 경우</p><ul><li><code>/etc/profile</code>을 제일 먼저 읽는다</li><li>유저 홈디렉토리의 <code>.profile</code>이 존재하면 읽는다</li></ul><p>bash 의 경우</p><p>다음 세 파일을 차례대로 확인해서, 처음 존재하는 하나만 실행한다.</p><ol><li><code>~/.bash_profile</code></li><li><code>~/.bash_login</code></li><li><code>~/.profile</code></li></ol><blockquote><p><a href="https://www.gnu.org/software/bash/manual/html_node/Bash-Startup-Files.html" target="_blank" rel="noreferrer">Bash Startup Files</a> gnu 공식문서</p></blockquote><h3 id="non-login-shell" tabindex="-1">Non-login Shell <a class="header-anchor" href="#non-login-shell" aria-label="Permalink to &quot;Non-login Shell&quot;">​</a></h3><ul><li>이미 로그인된 세션 내에서 새 터미널을 열거나, 쉘을 다시 실행했을 때</li><li>ex) GUI 환경에서 터미널 앱 열기</li></ul><p>ssh로 접속한 이후에 bash를 입력하면 비로그인 쉘이 된다.</p><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>쉘이 로그인인지 비로그인인지 확인하는 방법<br><code>echo $0</code> 앞에 <code>-</code>대시가 붙으면 로그인 쉘.<br> 이것은 POSIX 표준입니다.</p></div><div class="warning custom-block"><p class="custom-block-title">비로그인쉘의 경우 <code>~/.bashrc</code> 만 읽고 그 외 환경파일은 읽지 않습니다.</p></div>`,20)]))}const k=e(o,[["render",n]]);export{u as __pageData,k as default};
