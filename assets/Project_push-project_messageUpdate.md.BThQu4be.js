import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.B0zzL8Pn.js";const g=JSON.parse('{"title":"메세지 상태 업데이트는 어디서 처리해야 할까?","description":"","frontmatter":{},"headers":[],"relativePath":"Project/push-project/messageUpdate.md","filePath":"Project/push-project/messageUpdate.md","lastUpdated":1750564635000}'),n={name:"Project/push-project/messageUpdate.md"};function l(h,s,k,p,r,d){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="메세지-상태-업데이트는-어디서-처리해야-할까" tabindex="-1">메세지 상태 업데이트는 어디서 처리해야 할까? <a class="header-anchor" href="#메세지-상태-업데이트는-어디서-처리해야-할까" aria-label="Permalink to &quot;메세지 상태 업데이트는 어디서 처리해야 할까?&quot;">​</a></h1><h2 id="배경" tabindex="-1">배경 <a class="header-anchor" href="#배경" aria-label="Permalink to &quot;배경&quot;">​</a></h2><p><a href="https://github.com/opjt/push-project" target="_blank" rel="noreferrer">Push 프로젝트</a> 에서 <code>Sender</code>가 메시지를 소비한 후, <code>messageStatus</code>를 변경해야 하는 요구사항이 생김.<br> 이걸 어떤 모듈에서, 어떤 방식으로 처리할지 고민이 많았음.</p><blockquote><p>메세지 재시도 로직이나, 클라이언트가 메세지를 읽었음을 나타내기 위해 <code>status</code>를 변경해야 하기 때문.</p></blockquote><h2 id="고민한-옵션들" tabindex="-1">고민한 옵션들 <a class="header-anchor" href="#고민한-옵션들" aria-label="Permalink to &quot;고민한 옵션들&quot;">​</a></h2><ol><li><p><strong>Sender에서 직접 DB에 접근</strong></p><ul><li>구현은 쉽지만, 서비스 간 DB 접근이 파편화된 모놀리식 구조가 된다고 판단하여 제외.</li></ul></li><li><p><strong>Sender → Linker로 gRPC/HTTP 요청</strong></p><ul><li>메시지 상태 변경 책임을 Linker로 위임. 구조가 명확해지고 결합도 낮아짐.</li></ul></li><li><p><strong>Linker가 상태 변경 메시지 큐를 소비</strong></p><ul><li>느슨한 결합, 완전 비동기지만 메시지 순서나 장애 처리 등 복잡도 향상</li></ul></li></ol><p>1번을 제외한 2번과 3번중에서 많은 고민이 있었다<br> 3번을 적용하게 될 경우 <code>linker</code>는 메세지를 publish하는 주체이면서도 메세지 상태변경 큐를 소비하는 소비자가 되는 셈인데 이러한 구조가 당시에 는 어색하다고만 느껴져서<br> 최종적으로는 2번의 방식을 채택하였다</p><p>하지만 2번의 방법도 문제는 있었다</p><h2 id="문제-발생-하나의-요청당-하나의-디비-쿼리" tabindex="-1">문제 발생: 하나의 요청당 하나의 디비 쿼리? <a class="header-anchor" href="#문제-발생-하나의-요청당-하나의-디비-쿼리" aria-label="Permalink to &quot;문제 발생: 하나의 요청당 하나의 디비 쿼리?&quot;">​</a></h2><p>2번 방식으로 구현했을 때, 다음과 같은 문제가 보였음:</p><ul><li>메시지를 <strong>1만 명에게 보낼 경우</strong>, <code>Sender → Linker</code>로 <strong>1만 건의 요청</strong> 발생</li><li><code>Linker</code>는 이 요청마다 <strong>1만 건의 UPDATE 쿼리</strong>를 DB에 수행</li><li>결국 <strong>과도한 DB I/O</strong>가 발생하고, 병목 가능성 존재</li></ul><p>이 문제는 3번 방식에서도 동일하게 발생할 수 있는 구조적 한계라고 판단</p><h3 id="개선-linker-내부-큐-배치-처리-도입" tabindex="-1">개선: <code>Linker</code> 내부 큐 + 배치 처리 도입 <a class="header-anchor" href="#개선-linker-내부-큐-배치-처리-도입" aria-label="Permalink to &quot;개선: \`Linker\` 내부 큐 + 배치 처리 도입&quot;">​</a></h3><ul><li><code>Sender</code>는 기존처럼 gRPC로 상태 변경 요청을 보냄</li><li><code>Linker</code>는 해당 요청을 <strong>내부 in-memory 큐</strong>에 적재</li><li>별도의 워커(goroutine)가 주기적으로 큐를 확인하여 <strong>Bulk Update 쿼리 수행</strong></li></ul><p>업데이트하려고 하는 상태가 같은 메세지 아이디들 끼리 묶어 <code>bulk Update</code>하는 방식으로 개선을 하였다.</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- X</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, updated_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, updated_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- O</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">UPDATE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> messages </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SET</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> status</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;sent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, updated_at </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> NOW</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 65</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> or</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 66</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><h2 id="회고" tabindex="-1">회고 <a class="header-anchor" href="#회고" aria-label="Permalink to &quot;회고&quot;">​</a></h2><p>단순한 구조에서 시작했지만, 해당 서비스가 많은 트래픽을 감당하려면 어떤 구조가 되어야 할까 에서 시작된 고민이었다</p><p>글을 적다보니 메세지를 소비하는 <code>sender</code>에서도 마찬가지로 내부 큐를 통해 <code>linker</code>에게 여러번 요청을 보내는 것이 아닌, 변경하려고 하는 상태가 같은 messageId들을 배열형태로 담아 보내는 방법도 괜찮을 것 같다는 생각이 들었다</p><p>많은 서비스 기업들의 아키텍처 설명 영상이나 자료를 보면, 보통은 여러 서비스가 이벤트를 소비하며 느슨한 결합을 유지하는 부분에 초점을 맞추지 만, 그 이벤트에 대한 상태값 변경을 어떻게 처리하는지에 대해서는 깊이 언급하는 경우가 드물어서 어떻게 처리하는지 계속 찾아보려고했던 것 같다.</p>`,20)]))}const E=i(n,[["render",l]]);export{g as __pageData,E as default};
