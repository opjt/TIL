import{_ as s,c as a,o as l,ag as e}from"./chunks/framework._6d57y5r.js";const k=JSON.parse('{"title":"Linux ldd","description":"","frontmatter":{},"headers":[],"relativePath":"Tech/~/linux_ldd.md","filePath":"Tech/~/linux_ldd.md","lastUpdated":1760484436000}'),n={name:"Tech/~/linux_ldd.md"};function t(d,i,p,h,o,r){return l(),a("div",null,i[0]||(i[0]=[e(`<h1 id="linux-ldd" tabindex="-1">Linux ldd <a class="header-anchor" href="#linux-ldd" aria-label="Permalink to &quot;Linux ldd&quot;">​</a></h1><p>리눅스에서 <code>ldd</code> 명령어는 실행파일(또는 공유 라이브러리)이 어떤 공유 라이브러리(shared library, <code>.so</code>)에 의존하는지를 보여주는 명령어입니다.</p><p>사용 예시</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/bin/ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ldd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	linux-vdso.so.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007ffc93c81000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	libselinux.so.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/x86_64-linux-gnu/libselinux.so.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007d1fe0411000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	libc.so.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/x86_64-linux-gnu/libc.so.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007d1fe0000000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	libpcre2-8.so.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/x86_64-linux-gnu/libpcre2-8.so.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007d1fe0352000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	/lib64/ld-linux-x86-64.so.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007d1fe0473000)</span></span></code></pre></div><h2 id="공유-라이브러리-shared-library" tabindex="-1">공유 라이브러리 (shared Library) <a class="header-anchor" href="#공유-라이브러리-shared-library" aria-label="Permalink to &quot;공유 라이브러리 (shared Library)&quot;">​</a></h2><p>공유 라이브러리는 말 그대로 여러 프로그램이 함께 사용할 수 있는 라이브러리(코드 집합체)이다.</p><ul><li>리눅스에서는 보통 <code>.so</code>(shared object)</li><li>윈도우에서는 <code>.dll</code>(dynamic link library)라고 부름</li></ul><p>예를 들면 <code>printf()</code> 함수는 거의 모든 c 프로그램에서 사용하는데 프로그램마다 <code>printf()</code>의 구현을 전부 복사해 넣으면?</p><ul><li>프로그램 크기가 커짐</li><li>수정 시 전부 다시 빌드해야 함</li></ul><p>그래서 리눅스에서는 <code>libc.so.6</code> 같은 <strong>공유 라이브러리</strong>에 두고 런타임에 공유해서 링크하는 것</p><div class="info custom-block"><p class="custom-block-title">libc.so.6가 뭔가요?</p><p><code>libc.so.6</code>는 <strong>glibc(=GNU C Library)</strong> 의 핵심적인 부분 중 하나로 C언어로 작성된 프로그램이 동작하는데 필요한 가장 기본적인 기능을 담고 있음.</p></div><h2 id="동적-링커-dynamic-linker" tabindex="-1">동적 링커 (dynamic Linker) <a class="header-anchor" href="#동적-링커-dynamic-linker" aria-label="Permalink to &quot;동적 링커 (dynamic Linker)&quot;">​</a></h2><p>ELF 실행 파일을 실행하면, 커널이 바로 <code>main()</code>을 호출하지 않고<br> 먼저 동적 링커(<code>ex) ld-linux-x86-64.so.2</code>)를 실행합니다.</p><p>동적 링커는 이와 같은 일을 합니다:</p><ol><li>프로그램이 의존하는 <code>.so</code> 목록을 확인</li><li>각 <code>.so</code>를 어디서 찾을지 탐색</li><li>메모리에 로드하고 심볼 연결 수행</li><li>준비가 끝나면 <code>main()</code> 함수 호출</li></ol><h2 id="ld-library-path-란" tabindex="-1">LD_LIBRARY_PATH 란? <a class="header-anchor" href="#ld-library-path-란" aria-label="Permalink to &quot;LD_LIBRARY_PATH 란?&quot;">​</a></h2><p><code>LD_LIBRARY_PATH</code>는 <strong>동적 링커</strong>가 라이브러리를 탐색할 때 참고하는 환경 변수입니다.<br> 즉, 표준 시스템 디렉터리(<code>lib, usr/lib 등</code>)보다 우선적으로 탐색됩니다.</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> LD_LIBRARY_PATH</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">/usr/local/lib:/opt/mylibs</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./myapp</span></span></code></pre></div><p>위와 같이 설정하면 <code>myapp</code>를 실행할 때 링커는 <code>/usr/local/lib</code>, <code>/opt/mylibs</code> 경로에서 필요한 <code>.so</code> 파일을 우선적으로 찾습니다.</p>`,19)]))}const g=s(n,[["render",t]]);export{k as __pageData,g as default};
