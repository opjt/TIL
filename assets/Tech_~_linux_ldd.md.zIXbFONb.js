import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.B0zzL8Pn.js";const c=JSON.parse('{"title":"Linux ldd","description":"","frontmatter":{},"headers":[],"relativePath":"Tech/~/linux_ldd.md","filePath":"Tech/~/linux_ldd.md","lastUpdated":1760398179000}'),e={name:"Tech/~/linux_ldd.md"};function t(h,s,d,p,k,r){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="linux-ldd" tabindex="-1">Linux ldd <a class="header-anchor" href="#linux-ldd" aria-label="Permalink to &quot;Linux ldd&quot;">​</a></h1><p>리눅스에서 <code>ldd</code> 명령어는 실행파일(또는 공유 라이브러리)이 어떤 공유 라이브러리(shared library, <code>.so</code>)에 의존하는지를 보여주는 명령어입니다.</p><p>사용 예시</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> which</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/usr/bin/ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ldd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /usr/bin/ls</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	linux-vdso.so.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007ffc93c81000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	libselinux.so.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/x86_64-linux-gnu/libselinux.so.1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007d1fe0411000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	libc.so.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/x86_64-linux-gnu/libc.so.6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007d1fe0000000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	libpcre2-8.so.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /lib/x86_64-linux-gnu/libpcre2-8.so.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007d1fe0352000)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">	/lib64/ld-linux-x86-64.so.2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (0x00007d1fe0473000)</span></span></code></pre></div><h2 id="공유-라이브러리-shared-library" tabindex="-1">공유 라이브러리 (shared Library) <a class="header-anchor" href="#공유-라이브러리-shared-library" aria-label="Permalink to &quot;공유 라이브러리 (shared Library)&quot;">​</a></h2><p>공유 라이브러리는 말 그대로 여러 프로그램이 함께 사용할 수 있는 라이브러리(코드 집합체)이다.</p><ul><li>리눅스에서는 보통 <code>.so</code>(shared object)</li><li>윈도우에서는 <code>.dll</code>(dynamic link library)라고 부름</li></ul><p>예를 들면 <code>printf()</code> 함수는 거의 모든 c 프로그램에서 사용하는데 프로그램마다 <code>printf()</code>의 구현을 전부 복사해 넣으면?</p><ul><li>프로그램 크기가 커짐</li><li>수정 시 전부 다시 빌드해야 함</li></ul><p>그래서 리눅스에서는 <code>libc.so.6</code> 같은 <strong>공유 라이브러리</strong>에 두고 런타임에 공유해서 링크하는 것</p><div class="info custom-block"><p class="custom-block-title">libc.so.6가 뭔가요?</p><p><code>libc.so.6</code>는 <strong>glibc(=GNU C Library)</strong> 의 핵심적인 부분 중 하나로 C언어로 작성된 프로그램이 동작하는데 필요한 가장 기본적인 기능을 담고 있음.</p></div>`,11)]))}const g=i(e,[["render",t]]);export{c as __pageData,g as default};
