import{_ as a,c as t,o as r,ag as o}from"./chunks/framework._6d57y5r.js";const u=JSON.parse('{"title":"비대칭키 암호화 (공개키 암호화)","description":"","frontmatter":{},"headers":[],"relativePath":"Tech/~/security/public-key-crypto.md","filePath":"Tech/~/security/public-key-crypto.md","lastUpdated":1761311303000}'),i={name:"Tech/~/security/public-key-crypto.md"};function l(c,e,s,p,n,d){return r(),t("div",null,e[0]||(e[0]=[o('<h1 id="비대칭키-암호화-공개키-암호화" tabindex="-1">비대칭키 암호화 (공개키 암호화) <a class="header-anchor" href="#비대칭키-암호화-공개키-암호화" aria-label="Permalink to &quot;비대칭키 암호화 (공개키 암호화)&quot;">​</a></h1><p>비대칭키 암호(공개키 암호) 는 <strong>서로 다른 두개의 키</strong>를 사용하는 암호화 방식이다</p><p>비대칭키 암호는 한쪽 키로 암호화한 데이터는 다른 한쪽 키로만 복호화할 수 있다는 성질을 이용합니다.<br> 이 두 키는 수학적으로 연결되어 있지만, 공개 키에서 비밀를 역으로 계산하기는 매우 어렵게 설계되어 있습니다.</p><p>이러한 성질로 복호화할 수 있는 키는 공개되어도 상관 없기 때문에 <code>공개키 암호화</code> 라고도 합니다.</p><h2 id="why-비대칭키" tabindex="-1">Why 비대칭키? <a class="header-anchor" href="#why-비대칭키" aria-label="Permalink to &quot;Why 비대칭키?&quot;">​</a></h2><ul><li>대칭키를 사용할 경우 양쪽다 같은 키를 배포해야합니다 <ul><li>암호화에 쓸 키를 서로 공유해야 하는데, 이 키를 어떻게 안전하게 주고받을지 문제가 생김.</li><li>이 키를 전송하는 과정에서 해커가 가로채면 &gt; 보안 시스템 무너짐.</li></ul></li></ul><h2 id="비밀키로-암호화는-불가능" tabindex="-1">비밀키로 암호화는 불가능? <a class="header-anchor" href="#비밀키로-암호화는-불가능" aria-label="Permalink to &quot;비밀키로 암호화는 불가능?&quot;">​</a></h2><p>공개키로 암호화하고 비밀키로 복호화를 하는 것처럼<br> 반대로 비밀키로 암호화하고 공개키로 복호화도 가능하다</p>',8)]))}const _=a(i,[["render",l]]);export{u as __pageData,_ as default};
