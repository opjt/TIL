import{_ as i,c as a,o as e,ag as t}from"./chunks/framework.BDwTZuFy.js";const o=JSON.parse('{"title":"Viper SetEnvKeyReplacer","description":"","frontmatter":{},"headers":[],"relativePath":"go/viper-trs.md","filePath":"go/viper-trs.md","lastUpdated":1747536308000}'),n={name:"go/viper-trs.md"};function p(h,s,l,k,r,E){return e(),a("div",null,s[0]||(s[0]=[t(`<h1 id="viper-setenvkeyreplacer" tabindex="-1">Viper SetEnvKeyReplacer <a class="header-anchor" href="#viper-setenvkeyreplacer" aria-label="Permalink to &quot;Viper SetEnvKeyReplacer&quot;">​</a></h1><p><a href="https://github.com/spf13/viper" target="_blank" rel="noreferrer">Viper</a>는 env 파일이나 환경변수를 쉽게 사용하기 위한 go의 오픈소스 라이브러리다</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">os.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Getenv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;APP_ENV&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>물론 go에서는 위와 같은 방식으로 환경변수를 읽어올 수 있습니다.<br> 하지만 사용해야 하는 변수가 여러개일 경우 하나하나 <code>Getenv</code>를 하진 않을 것.</p><h2 id="setenvkeyreplacer" tabindex="-1">SetEnvKeyReplacer <a class="header-anchor" href="#setenvkeyreplacer" aria-label="Permalink to &quot;SetEnvKeyReplacer&quot;">​</a></h2><blockquote><p>위 기능은 오로직 환경변수에서만 동작합니다.</p></blockquote><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// APP_GO=test</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetEnvKeyReplacer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewReplacer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">GetString</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;APP.GO&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>환경변수에 <code>APP_GO</code> 라는 키가 있을때 위 메서드를 사용하면 <code>APP.GO</code>로 불러올 수 있게 합니다.</p><h2 id="환경변수와-중첩-구조체-unmarshal" tabindex="-1">환경변수와 중첩 구조체 <code>Unmarshal</code> <a class="header-anchor" href="#환경변수와-중첩-구조체-unmarshal" aria-label="Permalink to &quot;환경변수와 중첩 구조체 \`Unmarshal\`&quot;">​</a></h2><p><code>viper.Unmarshal(&amp;env)</code>를 사용할 때, 구성 파일(<code>.env.yaml</code>, <code>.json</code>, <code>.toml</code> 등)을 <code>viper.ReadInConfig()</code>로 읽은 경우에는 <strong>중첩 구조체</strong>도 자동으로 매핑됩니다:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Env</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    App </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">App</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Aws </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Aws</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`mapstructure:&quot;AWS&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">type</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Aws</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> struct</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    Port </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">string</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`mapstructure:&quot;PORT&quot;\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">AWS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  PORT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;8080&quot;</span></span></code></pre></div><p>위 구조라면 env.Aws.Port는 정상적으로 8080으로 매핑됩니다.</p><h3 id="하지만-환경변수는-다릅니다" tabindex="-1">하지만 환경변수는 다릅니다 <a class="header-anchor" href="#하지만-환경변수는-다릅니다" aria-label="Permalink to &quot;하지만 환경변수는 다릅니다&quot;">​</a></h3><p>환경변수에서는 계층 구조가 없기 때문에, AWS_PORT=8080처럼 flat하게 선언해도 Unmarshal(&amp;env)가 자동으로 중첩 구조체 필드에 매핑하지 못합니다.</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//AWS_PORT=8080</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetEnvKeyReplacer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewReplacer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AutomaticEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 이 상태로는 아래 코드가 작동하지 않습니다.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Unmarshal</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">env)</span></span></code></pre></div><p><code>해결 방법</code>: BindEnv()를 명시적으로 사용<br> 환경변수를 중첩 필드에 연결하려면, viper.BindEnv()로 수동 매핑을 해줘야 합니다:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">SetEnvKeyReplacer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(strings.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">NewReplacer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;_&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">))</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">viper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">AutomaticEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(다</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">_ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> viper.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">BindEnv</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;aws.port&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div><p>이렇게 하면 환경변수 AWS_PORT가 aws.port로 인식되고, Unmarshal()로 구조체 필드에도 잘 들어갑니다.</p>`,19)]))}const g=i(n,[["render",p]]);export{o as __pageData,g as default};
